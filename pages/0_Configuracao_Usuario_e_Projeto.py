import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import os

# Importar configura√ß√µes
from config import (
    TIPOS_CONSTRUCOES_CSV, STATE_USER_DATA, STATE_PROJECT_DATA, 
    STATE_USER_CONFIG_COMPLETED, UF_OPTIONS
)

# Importar logger para registro de eventos
from utils.gspread_logger import record_log

# T√≠tulo da p√°gina
st.title("‚öôÔ∏è Configura√ß√£o de Usu√°rio e Projeto")

# Fun√ß√£o para carregar tipos de constru√ß√£o do CSV com cache
@st.cache_data
def load_construction_types():
    """
    Carrega os tipos de constru√ß√£o do arquivo CSV com caching para melhor performance.
    Retorna DataFrame vazio com colunas esperadas se arquivo n√£o encontrado.
    """
    try:
        return pd.read_csv(TIPOS_CONSTRUCOES_CSV)
    except FileNotFoundError:
        st.warning(f"Arquivo '{TIPOS_CONSTRUCOES_CSV}' n√£o encontrado. Ser√° criado ao salvar.")
        return pd.DataFrame(columns=['ID_Tipo', 'Categoria_Construcao', 'Proposito_Construcao'])

# Carregar dados de tipos de constru√ß√£o
df_tipos = load_construction_types()

# Organizar layout em abas
tab1, tab2, tab3 = st.tabs(["üìã Dados do Usu√°rio", "üè¢ Dados do Projeto", "‚ö†Ô∏è Perfil de Risco"])

# Aba 1: Dados do Usu√°rio
with tab1:
    st.subheader("Informa√ß√µes do Usu√°rio")
    
    # Extrair dados atuais do usu√°rio (se existirem)
    user_data = st.session_state[STATE_USER_DATA]
    
    # Formul√°rio para dados do usu√°rio
    with st.form(key="user_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            nome = st.text_input("Nome completo*", value=user_data.get("Nome", ""))
            email = st.text_input("E-mail*", value=user_data.get("Email", ""))
            telefone = st.text_input("Telefone", value=user_data.get("Telefone", ""))
        
        with col2:
            empresa = st.text_input("Empresa/Organiza√ß√£o", value=user_data.get("Empresa", ""))
            cargo = st.text_input("Cargo/Fun√ß√£o", value=user_data.get("Cargo", ""))
        
        st.markdown("**Campos com * s√£o obrigat√≥rios**")
        salvar_usuario = st.form_submit_button("Salvar Dados do Usu√°rio")
        
        if salvar_usuario:
            # Valida√ß√£o de dados obrigat√≥rios
            if not nome or not email:
                st.error("Por favor, preencha os campos obrigat√≥rios: Nome e E-mail.")
            elif "@" not in email or "." not in email:
                st.error("Por favor, insira um e-mail v√°lido.")
            else:
                # Atualiza√ß√£o de dados do usu√°rio no session_state
                st.session_state[STATE_USER_DATA] = {
                    "Nome": nome,
                    "Email": email,
                    "Telefone": telefone,
                    "Empresa": empresa,
                    "Cargo": cargo
                }
                
                # Log da a√ß√£o
                record_log(user_id=email, project_id=st.session_state[STATE_PROJECT_DATA].get("Nome_da_Obra_ou_ID_Projeto", "N/A"), 
                           page="Configuracao", action="Salvar Dados Usuario")
                
                st.success("‚úÖ Dados do usu√°rio salvos com sucesso!")

# Aba 2: Dados do Projeto
with tab2:
    st.subheader("Detalhes do Projeto/Obra de Reforma")
    
    # Extrair dados atuais do projeto (se existirem)
    project_data = st.session_state[STATE_PROJECT_DATA]
    
    # Formul√°rio para dados do projeto
    with st.form(key="project_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            nome_projeto = st.text_input("Nome da Obra/ID do Projeto*", value=project_data.get("Nome_da_Obra_ou_ID_Projeto", ""))
            descricao = st.text_area("Descri√ß√£o do Projeto", value=project_data.get("Descricao_Projeto", ""), height=100)
            
            # Op√ß√µes para tipo de constru√ß√£o baseadas no CSV
            tipos_opcoes = [""] + list(df_tipos["Categoria_Construcao"].unique()) if not df_tipos.empty else [""]
            tipo_construcao = st.selectbox("Tipo de Constru√ß√£o*", options=tipos_opcoes, 
                                           index=tipos_opcoes.index(project_data.get("Tipo_Construcao", "")) if project_data.get("Tipo_Construcao", "") in tipos_opcoes else 0)
            
            # Filtragem din√¢mica baseada na sele√ß√£o do tipo
            if tipo_construcao and not df_tipos.empty:
                propositos = [""] + list(df_tipos[df_tipos["Categoria_Construcao"] == tipo_construcao]["Proposito_Construcao"].unique())
                proposito = st.selectbox("Prop√≥sito Principal*", options=propositos, 
                                        index=propositos.index(project_data.get("Proposito_Principal", "")) if project_data.get("Proposito_Principal", "") in propositos else 0)
            else:
                proposito = st.text_input("Prop√≥sito Principal*", value=project_data.get("Proposito_Principal", ""))
        
        with col2:
            # Localiza√ß√£o
            col2a, col2b = st.columns(2)
            with col2a:
                uf = st.selectbox("UF*", options=[""] + UF_OPTIONS, 
                                 index=([""] + UF_OPTIONS).index(project_data.get("UF", "")) if project_data.get("UF", "") in [""] + UF_OPTIONS else 0)
            with col2b:
                cidade = st.text_input("Cidade*", value=project_data.get("Cidade", ""))
            
            # Dados num√©ricos
            area = st.number_input("√Årea Constru√≠da (m¬≤)", min_value=0.0, 
                                  value=float(project_data.get("Area_Construida_m2", 0.0)))
            valor = st.number_input("Valor Total Estimado (R$)*", min_value=0.0, format="%.2f",
                                   value=float(project_data.get("Valor_Total_Estimado", 0.0)))
            prazo = st.number_input("Prazo Total (dias)*", min_value=0, 
                                   value=int(project_data.get("Prazo_Total_Dias", 0)))
            
            # Datas
            data_inicio = st.date_input("Data de In√≠cio", 
                                      value=project_data.get("Data_Inicio") if project_data.get("Data_Inicio") else datetime.now())
            
            # Calcular data fim com base no prazo
            data_fim_calculada = data_inicio + timedelta(days=prazo) if prazo > 0 else data_inicio
            data_fim = st.date_input("Data Prevista de Conclus√£o", value=data_fim_calculada)
            
            # N√≠vel de complexidade
            complexidade = st.selectbox("N√≠vel de Complexidade", options=["Baixo", "M√©dio", "Alto"],
                                       index=["Baixo", "M√©dio", "Alto"].index(project_data.get("Nivel_Complexidade", "M√©dio")))
        
        st.markdown("**Campos com * s√£o obrigat√≥rios**")
        salvar_projeto = st.form_submit_button("Salvar Dados do Projeto")
        
        if salvar_projeto:
            # Valida√ß√£o de dados obrigat√≥rios
            campos_obrigatorios = [
                (nome_projeto, "Nome da Obra/ID do Projeto"),
                (tipo_construcao, "Tipo de Constru√ß√£o"),
                (proposito, "Prop√≥sito Principal"),
                (uf, "UF"),
                (cidade, "Cidade"),
                (valor > 0, "Valor Total Estimado"),
                (prazo > 0, "Prazo Total")
            ]
            
            campos_vazios = [campo[1] for campo in campos_obrigatorios if not campo[0]]
            
            if campos_vazios:
                st.error(f"Por favor, preencha os campos obrigat√≥rios: {', '.join(campos_vazios)}")
            else:
                # Atualiza√ß√£o de dados do projeto no session_state
                st.session_state[STATE_PROJECT_DATA] = {
                    "Nome_da_Obra_ou_ID_Projeto": nome_projeto,
                    "Descricao_Projeto": descricao,
                    "Tipo_Construcao": tipo_construcao,
                    "Proposito_Principal": proposito,
                    "UF": uf,
                    "Cidade": cidade,
                    "Area_Construida_m2": area,
                    "Valor_Total_Estimado": valor,
                    "Prazo_Total_Dias": prazo,
                    "Data_Inicio": data_inicio,
                    "Data_Prevista_Fim": data_fim,
                    "Nivel_Complexidade": complexidade,
                    # Manter os valores de risco (ser√£o definidos na pr√≥xima aba)
                    "Apetite_ao_Risco": project_data.get("Apetite_ao_Risco", "Moderado"),
                    "Tolerancia_Desvio_Custo": project_data.get("Tolerancia_Desvio_Custo", 0.10),
                    "Tolerancia_Desvio_Prazo": project_data.get("Tolerancia_Desvio_Prazo", 0.15),
                    "Data_Cadastro": project_data.get("Data_Cadastro", datetime.now().strftime("%Y-%m-%d"))
                }
                
                # Log da a√ß√£o
                record_log(user_id=st.session_state[STATE_USER_DATA].get("Email", "N/A"), 
                           project_id=nome_projeto, 
                           page="Configuracao", action="Salvar Dados Projeto")
                
                st.success("‚úÖ Dados do projeto salvos com sucesso!")

# Aba 3: Perfil de Risco
with tab3:
    st.subheader("Configura√ß√µes de Perfil de Risco")
    st.markdown("""
    Nesta se√ß√£o, defina o apetite geral a riscos do projeto e as toler√¢ncias espec√≠ficas 
    para desvios de custo e prazo. Estas configura√ß√µes ajudar√£o a calibrar as an√°lises
    e a identificar quando os riscos excedem os limites aceit√°veis.
    """)
    
    # Extrair dados atuais do projeto (se existirem)
    project_data = st.session_state[STATE_PROJECT_DATA]
    
    # Formul√°rio para configura√ß√µes de risco
    with st.form(key="risk_profile_form"):
        # Apetite ao risco
        apetite = st.select_slider(
            "Apetite geral ao risco",
            options=["Muito Baixo (Conservador)", "Baixo", "Moderado", "Alto", "Muito Alto (Arrojado)"],
            value=project_data.get("Apetite_ao_Risco", "Moderado")
        )
        
        st.info("""
        O apetite ao risco indica a disposi√ß√£o geral para aceitar incertezas no projeto.
        Um perfil conservador favorece abordagens mais seguras, enquanto um perfil arrojado
        aceita mais incerteza em busca de maiores benef√≠cios potenciais.
        """)
        
        # Toler√¢ncias espec√≠ficas
        col1, col2 = st.columns(2)
        
        with col1:
            tol_custo = st.slider(
                "Toler√¢ncia a desvios de custo (%)",
                min_value=0.0,
                max_value=50.0,
                value=float(project_data.get("Tolerancia_Desvio_Custo", 0.10) * 100),
                step=1.0,
                format="%.1f%%"
            ) / 100.0  # Converter de porcentagem para decimal
            
            st.caption(f"""
            Um valor de {tol_custo:.1%} significa que o projeto pode tolerar um 
            aumento de at√© R$ {project_data.get('Valor_Total_Estimado', 0) * tol_custo:,.2f} 
            no or√ßamento total.
            """.replace(',', 'X').replace('.', ',').replace('X', '.'))
        
        with col2:
            tol_prazo = st.slider(
                "Toler√¢ncia a desvios de prazo (%)",
                min_value=0.0,
                max_value=50.0,
                value=float(project_data.get("Tolerancia_Desvio_Prazo", 0.15) * 100),
                step=1.0,
                format="%.1f%%"
            ) / 100.0  # Converter de porcentagem para decimal
            
            st.caption(f"""
            Um valor de {tol_prazo:.1%} significa que o projeto pode tolerar um 
            atraso de at√© {int(project_data.get('Prazo_Total_Dias', 0) * tol_prazo)} dias 
            em rela√ß√£o ao cronograma planejado.
            """)
        
        salvar_risco = st.form_submit_button("Salvar Configura√ß√µes de Risco")
        
        if salvar_risco:
            # Atualizar apenas os campos de risco no dicion√°rio de projeto
            project_data_updated = st.session_state[STATE_PROJECT_DATA].copy()
            project_data_updated["Apetite_ao_Risco"] = apetite
            project_data_updated["Tolerancia_Desvio_Custo"] = tol_custo
            project_data_updated["Tolerancia_Desvio_Prazo"] = tol_prazo
            
            st.session_state[STATE_PROJECT_DATA] = project_data_updated
            
            # Log da a√ß√£o
            record_log(user_id=st.session_state[STATE_USER_DATA].get("Email", "N/A"), 
                       project_id=st.session_state[STATE_PROJECT_DATA].get("Nome_da_Obra_ou_ID_Projeto", "N/A"), 
                       page="Configuracao", action="Salvar Perfil de Risco")
            
            st.success("‚úÖ Perfil de risco configurado com sucesso!")

# Verifica√ß√£o final para confirmar se a configura√ß√£o est√° completa
st.markdown("---")
st.subheader("Finaliza√ß√£o da Configura√ß√£o")

# Verificar se os dados m√≠nimos foram preenchidos
user_complete = (st.session_state[STATE_USER_DATA].get("Nome") and st.session_state[STATE_USER_DATA].get("Email"))
project_complete = (st.session_state[STATE_PROJECT_DATA].get("Nome_da_Obra_ou_ID_Projeto") and 
                   st.session_state[STATE_PROJECT_DATA].get("Valor_Total_Estimado", 0) > 0 and 
                   st.session_state[STATE_PROJECT_DATA].get("Prazo_Total_Dias", 0) > 0)

if user_complete and project_complete:
    if st.button("Confirmar e Concluir Configura√ß√£o"):
        # Definir flag de configura√ß√£o completa
        st.session_state[STATE_USER_CONFIG_COMPLETED] = True
        
        # Log da a√ß√£o
        record_log(user_id=st.session_state[STATE_USER_DATA].get("Email", "N/A"), 
                   project_id=st.session_state[STATE_PROJECT_DATA].get("Nome_da_Obra_ou_ID_Projeto", "N/A"), 
                   page="Configuracao", action="Configura√ß√£o Finalizada")
        
        st.success("‚úÖ Configura√ß√£o conclu√≠da com sucesso! Agora voc√™ pode prosseguir para as pr√≥ximas etapas do processo de gest√£o de riscos.")
        
        # Link para pr√≥xima etapa
        st.page_link("1_Identificacao_e_Cadastro_de_Riscos.py", 
                   label="Prosseguir para Identifica√ß√£o de Riscos", use_container_width=True)
else:
    missing = []
    if not user_complete:
        missing.append("Dados do Usu√°rio (Nome e E-mail)")
    if not project_complete:
        missing.append("Dados do Projeto (Nome, Valor e Prazo)")
    
    st.warning(f"‚ö†Ô∏è Para concluir a configura√ß√£o, preencha todos os campos obrigat√≥rios: {', '.join(missing)}")

# Adicionar informa√ß√µes contextuais no sidebar para ajudar o usu√°rio
with st.sidebar:
    st.subheader("‚ÑπÔ∏è Sobre a Configura√ß√£o")
    st.info("""
    Esta etapa √© fundamental para personalizar o sistema √†s suas necessidades espec√≠ficas.
    
    Os dados aqui fornecidos ser√£o utilizados para:
    
    - Personalizar an√°lises e relat√≥rios
    - Ajustar limiares de alertas de risco
    - Contextualizar recomenda√ß√µes
    - Manter registros organizados
    
    Todas as informa√ß√µes ficam armazenadas apenas na sua sess√£o atual.
    """)
    
    st.markdown("### Pr√≥ximos Passos")
    st.markdown("""
    Ap√≥s concluir a configura√ß√£o, voc√™ deve:
    
    1. **Identificar e cadastrar riscos** potenciais do seu projeto
    2. Realizar **an√°lises qualitativas** desses riscos
    3. Aprofundar com **an√°lises quantitativas**
    4. Desenvolver **planos de resposta** para os riscos priorit√°rios
    5. Implementar um sistema de **monitoramento**
    """) 